parameters:
	exclude_files:
		- src/Kernel.php

checkers:

	# use tabs over spaces
	- PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\DisallowSpaceIndentSniff
	# PHP code must use only UTF-8 without BOM
	- PhpCsFixer\Fixer\Basic\EncodingFixer
	# <?php opening tag
	- PhpCsFixer\Fixer\PhpTag\FullOpeningTagFixer
	# The closing ?> tag must be omitted from files containing only PHP.
	- PhpCsFixer\Fixer\PhpTag\NoClosingTagFixer
	# There must not be trailing whitespace at the end of lines.
	- PhpCsFixer\Fixer\Whitespace\NoTrailingWhitespaceFixer
	# ...and at the end of blank lines.
	- PhpCsFixer\Fixer\Whitespace\NoWhitespaceInBlankLineFixer
	# All files must end with a single blank line.
	- PhpCsFixer\Fixer\Whitespace\SingleBlankLineAtEofFixer
	# File name should match class name if possible.
	- PhpCsFixer\Fixer\Basic\Psr4Fixer


	# File Header

	# empty line before namespace
	- PhpCsFixer\Fixer\NamespaceNotation\SingleBlankLineBeforeNamespaceFixer
	# 1 Use statement per line
	- PhpCsFixer\Fixer\Import\SingleImportPerStatementFixer
	# Use statements are alphabetically ordered
	- PhpCsFixer\Fixer\Import\OrderedImportsFixer
	# disallow group use declarations use FooLibrary\Bar\Baz\{ ClassA, ClassB, ClassC, ClassD as Fizbo }
	- SlevomatCodingStandard\Sniffs\Namespaces\DisallowGroupUseSniff
	# Disallows leading backslash in use statement: use \Foo\Bar;
	- SlevomatCodingStandard\Sniffs\Namespaces\UseDoesNotStartWithBackslashSniff
	# Looks for unused imports from other namespaces.
	SlevomatCodingStandard\Sniffs\Namespaces\UnusedUsesSniff:
		searchAnnotations: yes

	# Language Construct (should be placed before some other fixers)

	# Functions should be used with `$strict` param set to `true`
	# - PhpCsFixer\Fixer\Strict\StrictParamFixer
	# replaces is_null(parameter) expression with `null === parameter`.
	PhpCsFixer\Fixer\LanguageConstruct\IsNullFixer:
		use_yoda_style: no
	# Calling `unset` on multiple items should be done in one call.
	- PhpCsFixer\Fixer\LanguageConstruct\CombineConsecutiveUnsetsFixer
	# Replace all `<>` with `!=`.
	- PhpCsFixer\Fixer\Operator\StandardizeNotEqualsFixer
	# Include/Require and file path should be divided with a single space. File path should not be placed under brackets.
	- PhpCsFixer\Fixer\ControlStructure\IncludeFixer

	# Arrays

	# use short array fixes
	PhpCsFixer\Fixer\ArrayNotation\ArraySyntaxFixer:
		syntax: short
	# use trailing command in last array element
	- PhpCsFixer\Fixer\ArrayNotation\TrailingCommaInMultilineArrayFixer
	# PHP single-line arrays should not have trailing comma.
	- PhpCsFixer\Fixer\ArrayNotation\NoTrailingCommaInSinglelineArrayFixer
	# In array declaration, there MUST NOT be a whitespace before each comma.
	- PhpCsFixer\Fixer\ArrayNotation\NoWhitespaceBeforeCommaInArrayFixer
	# Arrays should be formatted like function/method arguments, without leading or trailing single line space.
	- PhpCsFixer\Fixer\ArrayNotation\TrimArraySpacesFixer
	# In array declaration, there MUST be a whitespace after each comma.
	- PhpCsFixer\Fixer\ArrayNotation\WhitespaceAfterCommaInArrayFixer

	# Strings

	# Convert `heredoc` to `nowdoc` where possible.
	- PhpCsFixer\Fixer\StringNotation\HeredocToNowdocFixer
	# Convert double quotes to single quotes for simple strings.
	- PhpCsFixer\Fixer\StringNotation\SingleQuoteFixer


	# PHP keywords must be in lower case
	- PhpCsFixer\Fixer\Casing\LowercaseKeywordsFixer
	# The PHP constants `true`, `false`, and `null` MUST be in lower case
	- PhpCsFixer\Fixer\Casing\LowercaseConstantsFixer


	# Function defined by PHP should be called using the correct casing
	- PhpCsFixer\Fixer\Casing\NativeFunctionCasingFixer
	# In the argument list, there must be one space after each comma, and there must no be a space before each comma
	- PhpCsFixer\Fixer\FunctionNotation\MethodArgumentSpaceFixer


	# Inside a classy element "self" should be preferred to the class name itself.
	- PhpCsFixer\Fixer\ClassNotation\SelfAccessorFixer
	# class element order: constants, properties, from public to private
#	PhpCsFixer\Fixer\ClassNotation\OrderedClassElementsFixer:
#		order:
#			- use_trait
#			- constant
#			- constant_public
#			- constant_protected
#			- constant_private
#			- property_public
#			- property_protected
#			- property_private


	# constant names are CAPITALIZED (manuall fixing only :()
	- PHP_CodeSniffer\Standards\Generic\Sniffs\NamingConventions\UpperCaseConstantNameSniff


	# There MUST NOT be more than one property declared per statement.
	PhpCsFixer\Fixer\ClassNotation\SingleClassElementPerStatementFixer:
		elements: ['property']

	# Methods

	# They must be declared in camelCase.
	- PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff
	# Spaces should be properly placed in a function declaration.
	- PhpCsFixer\Fixer\FunctionNotation\FunctionDeclarationFixer
	# In function arguments there must not be arguments with default values before non-default ones.
	- PhpCsFixer\Fixer\FunctionNotation\NoUnreachableDefaultArgumentValueFixer

	# The keyword `elseif` should be used instead of `else if` so that all control keywords look like single words.
	- PhpCsFixer\Fixer\ControlStructure\ElseifFixer
	# Remove useless semicolon statements.
	- PhpCsFixer\Fixer\Semicolon\NoEmptyStatementFixer
	# Remove trailing commas in list() calls.
	- PhpCsFixer\Fixer\ControlStructure\NoTrailingCommaInListCallFixer
	# Removes unneeded parentheses around control statements.
	- PhpCsFixer\Fixer\ControlStructure\NoUnneededControlParenthesesFixer
	# A case should be followed by a colon and not a semicolon.
	- PhpCsFixer\Fixer\ControlStructure\SwitchCaseSemicolonToColonFixer
	# The structure body must be indented once.

	# finds unreachable catch blocks:

	# Casting

	# A single space or none should be between cast and variable (int) $val
	- PhpCsFixer\Fixer\CastNotation\CastSpacesFixer
	# Cast should be written in lower case.
	- PhpCsFixer\Fixer\CastNotation\LowercaseCastFixer
	# Replaces `intval`, `floatval`, `doubleval`, `strval` and `boolval` function calls with according type casting operator
	# - PhpCsFixer\Fixer\CastNotation\ModernizeTypesCastingFixer
	# Short cast `bool` using double exclamation mark should not be used
	- PhpCsFixer\Fixer\CastNotation\NoShortBoolCastFixer
	# Cast `(boolean)` and `(integer)` should be written as `(bool)` and `(int)`, `(double)` and `(real)` as `(float)`
	- PhpCsFixer\Fixer\CastNotation\ShortScalarCastFixer

	# Language Whitespace

	# Binary operators should be surrounded by at least one space.
	- PhpCsFixer\Fixer\Operator\BinaryOperatorSpacesFixer
	# Unary operators should be placed adjacent to their operands.
	- PhpCsFixer\Fixer\Operator\UnaryOperatorSpacesFixer
	# No space after the opening parenthesis and before the closing parenthesis
	- PhpCsFixer\Fixer\Whitespace\NoSpacesInsideParenthesisFixer
	# There MUST NOT be spaces around offset braces $a[0]
	- PhpCsFixer\Fixer\Whitespace\NoSpacesAroundOffsetFixer
	# There should not be space before or after object `T_OBJECT_OPERATOR` `->`.
	- PhpCsFixer\Fixer\Operator\ObjectOperatorWithoutWhitespaceFixer
	# Standardize spaces around ternary operator.
	- PhpCsFixer\Fixer\Operator\TernaryOperatorSpacesFixer
	# Concatenation $a . $b should be spaced according configuration
	PhpCsFixer\Fixer\Operator\ConcatSpaceFixer:
		spacing: one
	# Removes extra spaces between colon and case value.
	- PhpCsFixer\Fixer\ControlStructure\SwitchCaseSpaceFixer

	# Comments

	# Docblocks should have the same indentation as the documented subject.
	- PhpCsFixer\Fixer\Phpdoc\PhpdocIndentFixer
	# There should not be any empty comments.
	- PhpCsFixer\Fixer\Comment\NoEmptyCommentFixer
	# There should not be empty PHPDoc blocks.
	- PhpCsFixer\Fixer\Phpdoc\NoEmptyPhpdocFixer
	# Phpdocs should start and end with content, excluding the very first and last line of the docblocks.
	- PhpCsFixer\Fixer\Phpdoc\PhpdocTrimFixer

	# short list() syntax []
	PhpCsFixer\Fixer\ListNotation\ListSyntaxFixer:
		syntax: short

	# declare(strict_types = 1);
	- SlevomatCodingStandard\Sniffs\TypeHints\DeclareStrictTypesSniff
	# Enforces consistent formatting of return typehints: function foo(): ?int
	- SlevomatCodingStandard\Sniffs\TypeHints\ReturnTypeHintSpacingSniff

	# Checks for missing property types in phpDoc @var.
	- SlevomatCodingStandard\Sniffs\TypeHints\TypeHintDeclarationSniff


	- SlevomatCodingStandard\Sniffs\Types\EmptyLinesAroundTypeBracesSniff
	- SlevomatCodingStandard\Sniffs\Exceptions\ReferenceThrowableOnlySniff
	- SlevomatCodingStandard\Sniffs\Exceptions\ReferenceThrowableOnlySniff
	- SlevomatCodingStandard\Sniffs\ControlStructures\AssignmentInConditionSniff
	- SlevomatCodingStandard\Sniffs\ControlStructures\DisallowEqualOperatorsSniff
	- SlevomatCodingStandard\Sniffs\ControlStructures\RequireNullCoalesceOperatorSniff
	- SlevomatCodingStandard\Sniffs\Classes\UnusedPrivateElementsSniff
	- SlevomatCodingStandard\Sniffs\Namespaces\UseFromSameNamespaceSniff
	- SlevomatCodingStandard\Sniffs\Exceptions\DeadCatchSniff
	- SlevomatCodingStandard\Sniffs\Arrays\TrailingArrayCommaSniff
	- SlevomatCodingStandard\Sniffs\ControlStructures\LanguageConstructWithParenthesesSniff
	- SlevomatCodingStandard\Sniffs\ControlStructures\NewWithParenthesesSniff
	- SlevomatCodingStandard\Sniffs\ControlStructures\DisallowYodaComparisonSniff
	- SlevomatCodingStandard\Sniffs\Namespaces\AlphabeticallySortedUsesSniff
	- SlevomatCodingStandard\Sniffs\Classes\ClassConstantVisibilitySniff
	- SlevomatCodingStandard\Sniffs\TypeHints\ReturnTypeHintSpacingSniff
	- SlevomatCodingStandard\Sniffs\TypeHints\NullableTypeForNullDefaultValueSniff
	- SlevomatCodingStandard\Sniffs\TypeHints\ParameterTypeHintSpacingSniff
	- SlevomatCodingStandard\Sniffs\Namespaces\DisallowGroupUseSniff
	- SlevomatCodingStandard\Sniffs\Namespaces\MultipleUsesPerLineSniff
	- SlevomatCodingStandard\Sniffs\Namespaces\UseDoesNotStartWithBackslashSniff
	- SlevomatCodingStandard\Sniffs\TypeHints\LongTypeHintsSniff
	SlevomatCodingStandard\Sniffs\Types\EmptyLinesAroundTypeBracesSniff:
		linesCountAfterOpeningBrace: 0
		linesCountBeforeClosingBrace: 0
